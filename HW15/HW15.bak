#lang racket
(require(lib "eopl.ss" "eopl"))

(define-datatype environment environment?
  (empty-env)
  (extend-env
   (saved-var var?)
   (saved-val scheme-value?)
   (saved-env environment?)))

(define var? symbol?)
(define scheme-value? (lambda (s) #t))

(define apply-env
  (lambda (env search-var)
    (cases environment env
      (empty-env ()
                 (report-no-binding-found search-var))
      (extend-env (saved-var saved-val saved-env)
                  (if (eqv? search-var saved-var)
                      saved-val
                      (apply-env saved-env search-var))))))

(define init-env 
    (lambda ()
      (extend-env 
       'i (num-val 1)
       (extend-env
        'v (num-val 5)
        (extend-env
         'x (num-val 10)
         (empty-env))))))

(define-datatype expval expval?
    (num-val
      (value number?))
    (bool-val
      (boolean boolean?)))
    
  (define expval->num
    (lambda (v)
      (cases expval v
	(num-val (num) num)
	(else (expval-extractor-error 'num v)))))

  (define expval->bool
    (lambda (v)
      (cases expval v
	(bool-val (bool) bool)
	(else (expval-extractor-error 'bool v)))))

(define expval-extractor-error
    (lambda (variant value)
      (eopl:error 'expval-extractors "Looking for a ~s, found ~s"
	variant value)))

(define value-of-program 
    (lambda (pgm)
      (cases program pgm
        (a-program (exp1)
          (value-of exp1 (init-env))))))

(define-datatype program program?
 (a-program(expl1 expression?)))

(define report-no-binding-found
  (lambda (search-var)
    (eopl:error 'apply-env "No binding for ~s" search-var)))

(define run
  (lambda (string)
    (value-of-program (scan&parse string))))

(define the-lexical-spec
    '((whitespace (whitespace) skip)
      (comment ("%" (arbno (not #\newline))) skip)
      (identifier
       (letter (arbno (or letter digit "_" "-" "?")))
       symbol)
      (number (digit (arbno digit)) number)
      (number ("-" digit (arbno digit)) number)
      ))
  
(define scan&parse
     (sllgen:make-string-parser the-lexical-spec the-grammar))

;=========================================================================================================================================

;Ethan Brinkman
;HW14: Due 4/27
;Exercises 3.6, 3.7, 3.8
;You are to put a copy of the entire upgraded interpreter code in your repos
;along with test data that shows each of the added features working.

;Exercise 3.6
;Extend the language by adding a new operator minus that takes one argument, n, and returns -n.
;For example, the value of minus(-(minus(5),9)) should be 14.
;Exercise 3.7
;Extend the language by adding operators for addition, multiplication, and integer quotient
;Exercise 3.8
;Add a numeric equality predicate equal? and numeric order predicates greater? and less? to the set of operations in the defined language.

;============================================================
;Changes to expression datatype, value-of, and the-grammar: #
;============================================================

(define-datatype expression expression?
  (const-exp(num number?))
  (var-exp(var symbol?))
  (zero?-exp(exp1 expression?))
  (if-exp
      (exp1 expression?)
      (exp2 expression?)
      (exp3 expression?))
  (let-exp
      (var symbol?)
      (exp1 expression?)
      (body expression?))

  ;###ADDING THE MINUS-EXP###
  
  (minus-exp
      (exp1 expression?))
  
  ;###ADDING THE ARITHMETIC EXPRESSIONS###
  
  (diff-exp
       (exp1 expression?)
       (exp2 expression?))
  (add-exp
       (exp1 expression?)
       (exp2 expression?))
  (mul-exp
       (exp1 expression?)
       (exp2 expression?))
  (div-exp
       (exp1 expression?)
       (exp2 expression?))

  ;###ADDING THE NUMERIC CHECKS###

  (equal?-exp
       (exp1 expression?)
       (exp2 expression?))
  (greater?-exp
       (exp1 expression?)
       (exp2 expression?))
  (less?-exp
       (exp1 expression?)
       (exp2 expression?))
  )
 

(define value-of
    (lambda (exp env)
      (cases expression exp
        (const-exp (num) (num-val num))
        (var-exp (var) (apply-env env var))
        (zero?-exp (exp1)
          (let ((val1 (value-of exp1 env)))
            (let ((num1 (expval->num val1)))
              (if (zero? num1)
                (bool-val #t)
                (bool-val #f)))))
        (if-exp (exp1 exp2 exp3)
          (let ((val1 (value-of exp1 env)))
            (if (expval->bool val1)
              (value-of exp2 env)
              (value-of exp3 env))))
        (let-exp (var exp1 body)       
          (let ((val1 (value-of exp1 env)))
            (value-of body
              (extend-env var val1 env))))

        ;###ADDING THE MINUS-EXP###
        
        (minus-exp (exp1)
        (let ((val1 (value-of exp1 env)))
          (let ((num1 (expval->num val1)))
            (num-val (- num1)))))
    
        ;###ADDING THE ARITHMETIC EXPRESSIONS###
        
        (diff-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
                (val2 (value-of exp2 env)))
            (let ((num1 (expval->num val1))
                  (num2 (expval->num val2)))
              (num-val
                (- num1 num2)))))
        
        (add-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
                (val2 (value-of exp2 env)))
            (let ((num1 (expval->num val1))
                  (num2 (expval->num val2)))
              (num-val
                (+ num1 num2)))))
        
        (mul-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
              (val2 (value-of exp2 env)))
            (let ((num1 (expval->num val1))
                (num2 (expval->num val2)))
            (num-val (* num1 num2)))))
        
        (div-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
              (val2 (value-of exp2 env)))
            (let ((num1 (expval->num val1))
                (num2 (expval->num val2)))
            (num-val (quotient num1 num2)))))

        ;###ADDING THE NUMERIC CHECKS###

        (equal?-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
              (val2 (value-of exp2 env)))
          (let ((num1 (expval->num val1))
                (num2 (expval->num val2)))
            (bool-val (= num1 num2)))))
        
        (greater?-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
              (val2 (value-of exp2 env)))
          (let ((num1 (expval->num val1))
                (num2 (expval->num val2)))
            (bool-val (> num1 num2)))))
        
        (less?-exp (exp1 exp2)
          (let ((val1 (value-of exp1 env))
              (val2 (value-of exp2 env)))
          (let ((num1 (expval->num val1))
                (num2 (expval->num val2)))
            (bool-val (< num1 num2)))))
        )))


(define the-grammar
   '((program (expression) a-program)
     (expression (number) const-exp)      
     (expression
       ("zero?" "(" expression ")")
      zero?-exp)
     (expression
       ("if" expression "then" expression "else" expression)
      if-exp)
     (expression (identifier) var-exp)
     (expression
       ("let" identifier "=" expression "in" expression)
      let-exp)
      
     ;###ADDING THE MINUS-EXP###

     (expression
       ("minus" "(" expression ")") minus-exp)
     
     ;###ADDING THE ARITHMETIC EXPRESSIONS###
      
     (expression
       ("-" "(" expression "," expression ")") diff-exp)
     
     (expression
       ("+" "(" expression "," expression ")") add-exp)
     
     (expression
       ("*" "(" expression "," expression ")") mul-exp)
     
     (expression
       ("/" "(" expression "," expression ")") div-exp)

     ;###ADDING THE NUMERIC CHECKS###

     (expression
       ("equal?" "(" expression "," expression ")") equal?-exp)
     
     (expression
       ("greater?" "(" expression "," expression ")") greater?-exp)
     
     (expression
       ("less?" "(" expression "," expression ")") less?-exp)    
      ))


;============================================================
;Test data that shows each of the added features working:   #
;============================================================

(run "+(2,2)")
;(num-val 4)

(run "*(2,5)")
;(num-val 10)

(run "/(10,2)")
;(num-val 5)

(run "/(2,10)")
;(num-val 0)

(run "minus(x)")
;(num-val -10)

(run "minus(-(minus(5),9))")
;(num-val 14)

(run "greater?(5, +(2,2))")
;(bool-val #t)

(run "equal?(minus(/(150,minus(15))),*(2,5))") ;(checking if -(150/-15) = 2*5)
;(bool-val #t)

(run "less?(2,2)")
;(bool-val #f)


























