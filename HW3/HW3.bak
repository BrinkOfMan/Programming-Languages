#lang racket

;Exercise 1.15
;(duple n x) returns a list containing n copies of x

(define duple
  (lambda (n x)
    (cond
      ((zero? n) '())
      (#t(cons x (duple (- n 1) x))))))

(duple 2 3)
(duple 4 '(ha ha))
(duple 0 '(blah))

;Exercise 1.17
;(down lst) wraps parentheses around each top-level element of lst

(define down
  (lambda (ls)
    (map list ls)))

(down '(1 2 3))
(down '((a) (fine) (idea)))
(down '(a (more (complicated)) object))

;Exercise 1.20
;(count-occurrences s slist) returns the number of occurrences of s in slist

(define count-occurrences
  (lambda (s slist)
    (cond
      ((null? slist) 0)
      ((list? (car slist)) (+ (count-occurrences s (car slist)) (count-occurrences s (cdr slist))))
      ((equal? s (car slist)) (+ 1 (count-occurrences s (cdr slist))))
      (#t (count-occurrences s (cdr slist))))))
      
(count-occurrences 'x '((f x) f (((x z) x))))
(count-occurrences 'x '((f x) f (((x z) () x))))
(count-occurrences 'w '((f x) f (((x z) x))))

;Exercise 21
;(product sos1 sos2), where sos1 and sos2 are each a list of sumbols without repetitions,
;returns a list of 2-lists that represents the Cartesian product of sos1 and sos2.
;The 2-lists may appear in any order

(define product
  (lambda (sos1 sos2)
    (cond
      ((null? sos1) '())
      ((null? sos2) '())
      (#t(append (map (lambda (s2) (list (car sos1) s2)) sos2) (product (cdr sos1) sos2))))))

(product '(a b c) '(x y))


;Exercise 23
;(list-index pred lst) returns the 0-based position of the first element of lst that satisfies the predicate pred.
;If no elemenet of lst satisfies the predicate, the list-index returns #f

(define list-index
  (lambda (pred lst)
    (cond
      ((null? lst) #f)
      ((pred (car lst)) 0)
      (#t (if (list-index pred (cdr lst)) (+ 1 (list-index pred (cdr lst))) ;Probably a better way around this
                                                           #f)))));But the if statement guards against adding a boolean

(list-index number? '(a 2 (1 3) b 7))
(list-index symbol? '(a (b c) 17 foo))
(list-index symbol? '(1 2 (a b) 3))

;Exercise 24
;(every? pred lst) returns #f if any element of lst fails to satisfy pred, and returns #t otherwise

(define every?
  (lambda (pred lst)
    (cond
      ((null? lst) #t)
      ((pred (car lst)) (every? pred (cdr lst)))
      (else #f))))

(every? number? '(a b c 3 e))
(every? number? '(1 2 3 5 4))